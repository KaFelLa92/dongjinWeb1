[ 동기 vs 비동기 ]   : 프로그래밍에서 작업 처리하는 방식
    1. 동기란?    여러 작업이 실행될 때 작업 간의 실행 순서를 제어
              하나의 스레드가 동시에 접근 차단
        특징 :
        1) 순차적처리
        2) 느리다
        3) 무결성 중시
            예] 계좌이체 : 출금/입금

    2. 비동기란?   여러 작업이 실행될 때 독립적으로 실행 순서 부여
               하나의 스레드가 동시에 접근 허용
        특징 :
        1) 동시처리
        2) 빠르다
        3) 무결성 보장안됨
            예] 채팅
[ fetch ]
    1. 정의 : JS에서 제공하는 내장 (통신) 함수
    2. 역할 : HTTP 요청을 보내고 응답을 비동기적으로 처리 함수
    3. 사용법
        [ 비동기 방법 ] : then 이용한 체인 형식
        () => {
            fetch( url , option )
                .then( response => response.json() )
                .then( data => { } )
                .catch( error => { } )
        } // func end
        [ 동기 방법 ] : async/await 이용한 동기 형식 , 권장 방법
        async () => {
            try{
                const response = await fetch( url , option );
                const data = await response.json();
            } catch( error) {
                console.log( error);
            } // catch end
        } // func end

    4.
        url : Spring 프로젝트내 통신할 controller의 @XXXmapping에서 정의된 URL
            주로 get/delete queryString : `url?param1=${value1}&param2=${value2}`
            주로 *식별자*
        option :
            주로 get/delete : { method : "GET" } ,
            주로 post/put : { method : "GET" ,
                            headers : { "Content-Type" : "application/json" } ,
                            body : JSON.stringify( data ) }
        then( 응답객체 => 응답객체.json() ) : 응답객체를 json 타입으로 변환
            * then( 응답객체 => 응답객체.text() ) : 응답객체를 문자 타입으로 변환 (쓸 일은 없다)
            * 주의할점 : 자바에서 보내오는 타입이 String 타입이거나 값이 null이면 .json() 불가능하다.
            * 추후에 타입반환 ResponseBody< memberDto >
        then( 변환된객체 => { 실행문 } )    : 통신 응답 결과
        catch( 에러객체 => { 실행문 } )     : 통신 에러 발생







