HTTP : HyperText Transfer Protocol
    - 문자 이동 규약/규칙
    1. 정의 : 웹/앱에서 사용되는 문자/바이트 통신 규약
    2. 특징 :
        1) 무상태 프로토콜( 상태와 저장 기능 없음 )
        2) 독립적 : 이전 통신과 다음 통신 관련 없음
        3) TCP/IP 프로토콜의 종속되어 동작한다. ip를 사용한다. http://192.168.40.185

    3. 주소체계
        * http:// ip번호 : port번호/ 자원의 위치
        * 자원위치 :
            (1) JSP는 프로젝트내 webapp 폴더이하경로
            (2) js/css/img 등은 resources -> static 폴더이하경로
            (3) controller는 @RequestMapping(), @XXXMapping()
        1) URL : 웹 자원의 주소 , 네트워크 상 자료의 위치를 표시하는 규약
            HTML의 위치를 찾는 주소
            http://localhost:8080/member/login.jsp
        2) URL : 각종 자료들의 유일한 이름이나 위치를 표시하는 규약 , URL + 쿼리스트링
            https://nid.naver.com/user2/join/agree 여기까지가 URL
            https://nid.naver.com/user2/join/agree?lang=ko_KR&realname= 쿼리스트링까지 포함하면 URI

    4. HTTP HEADER : HTTP 통신 정보/옵션 정보가 들어있는 곳
        * 브라우저의 F12(개발자도구) -> 네트워크 탭 확인 가능
        [ 주요 속성 ]
        1. HTTP METHOD : HTTP 이용한 통신 요청할 때 분류하는 규칙(POST, GET, PUT, DELETE)
        2. HTTP BODY : HTTP 이용하여 데이터의 내용/본문 보낼때 사용되는 규칙
        3. HTTP Content-Type : HTTP 이용하여 데이터의 타입 정보 포함하는 규칙
        4. HTTP HOST : HTTP 이용한 통신 요청하는 서버의 도메인 주소(URL)

    5. HTTP METHOD 종류
        1) POST     : @PostMapping          Create
        2) GET      : @GetMapping           Read
        3) PUT      : @PutMapping           Update
        4) DELETE   : @DeleteMapping        Delete

    6. HTTP Content-Type 종류
        1) 정의 : HTTP의 요청과 응답의 본문 데이터 형식을 나타내는 HTTP header 정보 중 하나
        2) 목적 : 서버와 클라이언트가 데이터를 주고 받는 형식을 명시한다.
        3) 종류 :
            (1) text/html                           : html 문서 ( JSP 포함 )
            (2) text/plain                          : 일반텍스트 ( 자바에서 String 반환 시 )
            (3) application/json                    : JSON데이터 ( REST API 주데이터 )*
            (4) application/x-www-form-urlencoded   : 폼 형식 데이터 ( html <form> 마크업 )
            (5) multipart/form-data                 : 첨부파일 업로드, 대용량 데이터(바이트)

    7. HTTP 사용처
        1) 브라우저 : 크롬, 엣지, 사파리 등등에서 웹주소(get방식) 입력창
        2) Taland API : 개발자 입장에서의 HTTP 테스트
        3) JS : fetch 등 HTTP 통신 라이브러리

    8. HTTP 데이터를 보내는 방법
        방법1) 쿼리스트링 이용하는 방법 ( GET, POST, PUT, DELETE ) , 경로상의 데이터 노출된다.
            - URL 주소상의 '?' 물음표 뒤로 매개변수와 값을 표시하여 &엔퍼센트로 구분
            - localhost:8080/member/login.jsp?id=qwe
            - @RequestParam

        방법2) BODY 이용하는 방법 ( POST, PUT ) , 경로상의 데이터 노출 안됨
            - HTTP 요청과 응답 내용 자체를 전달하는 방법
            - localhost:8080/member/login.jsp       , { "id" , "qwe" }
            - @RequestBody

        방법3) FORM 이용하는 방법 ( POST )
            - HTML <form> 마크업을 이용한 데이터 보내는 방법
            - 종류 :
                1) 데이터 위주 폼 : application/x-www-form-urlencoded
                2) 첨부파일 폼 : multipart/form-data
            - 스프링 매핑 : @ModelAttribute(생략가능)

    9. HTTP 응답 코드
        1. 정의 : 서버가 클라이언트의 요청에 대한 결과를 나타내는 코드
        2. 종류
            - 1xx : 요청을 받고 진행중 상태
            - 2xx : 요청을 받고 응답을 처리한 상태
                *200* : 요청 받고 응답 자료 있다. (*성공*)
                201 : 저장 성공하고 응답 자료 있다.
                204 : 저장 성공했으나 응답 자료 없다.
            - 3xx : 요청을 완료하기 위한 추가 조치 요구 상태
            - 4xx : 클라이언트 오류
                400 : 서버가 이해할 수 없는 요청 ( 쿼리스트링 , body , 매핑 오류 )
                401 : 권한 없음
                403 : 권한 거부
                *404* : 서버 요청에 따른 주소 상 자원이 없을 때 (경로 오류)
                409 : 중복 값일 때
            - 5xx : 서버 오류
                *500* : 서버의 예기치 못한 오류 발생 (JAVA 고쳐야함)

